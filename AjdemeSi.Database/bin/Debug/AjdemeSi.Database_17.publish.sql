/*
Deployment script for AjdemeSi

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "AjdemeSi"
:setvar DefaultFilePrefix "AjdemeSi"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AspNetRoles]...';


GO
CREATE TABLE [dbo].[AspNetRoles] (
    [Id]   NVARCHAR (128) NOT NULL,
    [Name] NVARCHAR (256) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetRoles] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserClaims]...';


GO
CREATE TABLE [dbo].[AspNetUserClaims] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [UserId]     NVARCHAR (128) NOT NULL,
    [ClaimType]  NVARCHAR (MAX) NULL,
    [ClaimValue] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.AspNetUserClaims] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserLogins]...';


GO
CREATE TABLE [dbo].[AspNetUserLogins] (
    [LoginProvider] NVARCHAR (128) NOT NULL,
    [ProviderKey]   NVARCHAR (128) NOT NULL,
    [UserId]        NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserLogins] PRIMARY KEY CLUSTERED ([LoginProvider] ASC, [ProviderKey] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUserRoles]...';


GO
CREATE TABLE [dbo].[AspNetUserRoles] (
    [UserId] NVARCHAR (128) NOT NULL,
    [RoleId] NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.AspNetUserRoles] PRIMARY KEY CLUSTERED ([UserId] ASC, [RoleId] ASC)
);


GO
PRINT N'Creating [dbo].[AspNetUsers]...';


GO
CREATE TABLE [dbo].[AspNetUsers] (
    [Id]                   NVARCHAR (128) NOT NULL,
    [Email]                NVARCHAR (256) NOT NULL,
    [UserName]             NVARCHAR (256) NOT NULL,
    [EmailConfirmed]       BIT            NOT NULL,
    [PasswordHash]         NVARCHAR (MAX) NULL,
    [SecurityStamp]        NVARCHAR (MAX) NULL,
    [PhoneNumber]          NVARCHAR (MAX) NULL,
    [PhoneNumberConfirmed] BIT            NOT NULL,
    [TwoFactorEnabled]     BIT            NOT NULL,
    [LockoutEndDateUtc]    DATETIME       NULL,
    [LockoutEnabled]       BIT            NOT NULL,
    [AccessFailedCount]    INT            NOT NULL,
    [DateCreated]          DATETIME       NULL,
    CONSTRAINT [PK_dbo.AspNetUsers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ChatMessage]...';


GO
CREATE TABLE [dbo].[ChatMessage] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [UsersGroupId] INT            NOT NULL,
    [SenderId]     NVARCHAR (128) NOT NULL,
    [Message]      NVARCHAR (MAX) NOT NULL,
    [DateCreated]  DATETIME       NOT NULL,
    [DateModified] DATETIME       NULL,
    CONSTRAINT [PK_dbo.ChatMessage] PRIMARY KEY CLUSTERED ([Id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[DriverSettings]...';


GO
CREATE TABLE [dbo].[DriverSettings] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [UserId]    NVARCHAR (128) NOT NULL,
    [City]      NVARCHAR (128) NULL,
    [Country]   NVARCHAR (128) NULL,
    [BirthDate] DATETIME       NULL,
    CONSTRAINT [PK_dbo.DriverSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Driving]...';


GO
CREATE TABLE [dbo].[Driving] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [DriverUserId]      NVARCHAR (128) NOT NULL,
    [FromCounty]        NVARCHAR (128) NULL,
    [FromCity]          NVARCHAR (128) NULL,
    [FromPlace]         NVARCHAR (128) NULL,
    [ToCounty]          NVARCHAR (128) NULL,
    [ToCity]            NVARCHAR (128) NULL,
    [ToPlace]           NVARCHAR (128) NULL,
    [StartTime]         DATETIME       NOT NULL,
    [EndTime]           DATETIME       NOT NULL,
    [TravelTime]        INT            NOT NULL,
    [MaxPassengers]     INT            NOT NULL,
    [TotalPrice]        REAL           NOT NULL,
    [MinTotalPrice]     REAL           NOT NULL,
    [PricePerPassenger] REAL           NOT NULL,
    [ReturnDrivingId]   INT            NULL,
    [UsersGroupId]      INT            NOT NULL,
    [DateCreated]       DATETIME       NULL,
    CONSTRAINT [PK_dbo.Driving] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DrivingPassangers]...';


GO
CREATE TABLE [dbo].[DrivingPassangers] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [UserId]      NVARCHAR (128) NOT NULL,
    [DrivingId]   INT            NOT NULL,
    [Rate]        INT            NULL,
    [RateComment] NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.DrivingPassengers] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Friends]...';


GO
CREATE TABLE [dbo].[Friends] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [Friend1Id]   NVARCHAR (128) NOT NULL,
    [Friend2Id]   NVARCHAR (128) NOT NULL,
    [DateCreated] DATETIME       NOT NULL,
    CONSTRAINT [PK_dbo.Friends] PRIMARY KEY CLUSTERED ([Id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[GroupMembers]...';


GO
CREATE TABLE [dbo].[GroupMembers] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [UsersGroupId] INT            NOT NULL,
    [MemberId]     NVARCHAR (128) NOT NULL,
    CONSTRAINT [PK_dbo.GroupMembers] PRIMARY KEY CLUSTERED ([Id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[UserSettings]...';


GO
CREATE TABLE [dbo].[UserSettings] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [UserId]    NVARCHAR (128) NOT NULL,
    [City]      NVARCHAR (128) NULL,
    [Country]   NVARCHAR (128) NULL,
    [BirthDate] DATETIME       NULL,
    CONSTRAINT [PK_dbo.UserSettings] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersGroup]...';


GO
CREATE TABLE [dbo].[UsersGroup] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [UserCreatorId] NVARCHAR (128) NOT NULL,
    [DateCreated]   DATETIME       NOT NULL,
    CONSTRAINT [PK_dbo.UsersGroup] PRIMARY KEY CLUSTERED ([Id] ASC)
) ON [PRIMARY];


GO
PRINT N'Creating unnamed constraint on [dbo].[AspNetUsers]...';


GO
ALTER TABLE [dbo].[AspNetUsers]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating unnamed constraint on [dbo].[Driving]...';


GO
ALTER TABLE [dbo].[Driving]
    ADD DEFAULT (getdate()) FOR [DateCreated];


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims]
    ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins]
    ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles]
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.ChatMessage_dbo.UsersGroup_UsersGroupId]...';


GO
ALTER TABLE [dbo].[ChatMessage]
    ADD CONSTRAINT [FK_dbo.ChatMessage_dbo.UsersGroup_UsersGroupId] FOREIGN KEY ([UsersGroupId]) REFERENCES [dbo].[UsersGroup] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.ChatMessage_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[ChatMessage]
    ADD CONSTRAINT [FK_dbo.ChatMessage_dbo.AspNetUsers_UserId] FOREIGN KEY ([SenderId]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.DriverSettings_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[DriverSettings]
    ADD CONSTRAINT [FK_dbo.DriverSettings_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.Driving_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[Driving]
    ADD CONSTRAINT [FK_dbo.Driving_dbo.AspNetUsers_UserId] FOREIGN KEY ([DriverUserId]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Driving_dbo.Driving_Id]...';


GO
ALTER TABLE [dbo].[Driving]
    ADD CONSTRAINT [FK_dbo.Driving_dbo.Driving_Id] FOREIGN KEY ([ReturnDrivingId]) REFERENCES [dbo].[Driving] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Driving_dbo.UsersGroup_UsersGroupId]...';


GO
ALTER TABLE [dbo].[Driving]
    ADD CONSTRAINT [FK_dbo.Driving_dbo.UsersGroup_UsersGroupId] FOREIGN KEY ([UsersGroupId]) REFERENCES [dbo].[UsersGroup] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.DrivingPassengers_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[DrivingPassangers]
    ADD CONSTRAINT [FK_dbo.DrivingPassengers_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.DrivingPassengers_dbo.Driving_Id]...';


GO
ALTER TABLE [dbo].[DrivingPassangers]
    ADD CONSTRAINT [FK_dbo.DrivingPassengers_dbo.Driving_Id] FOREIGN KEY ([DrivingId]) REFERENCES [dbo].[Driving] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Friends1_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[Friends]
    ADD CONSTRAINT [FK_dbo.Friends1_dbo.AspNetUsers_UserId] FOREIGN KEY ([Friend1Id]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.Friends2_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[Friends]
    ADD CONSTRAINT [FK_dbo.Friends2_dbo.AspNetUsers_UserId] FOREIGN KEY ([Friend2Id]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.GroupMembers_dbo.UsersGroup_UsersGroupId]...';


GO
ALTER TABLE [dbo].[GroupMembers]
    ADD CONSTRAINT [FK_dbo.GroupMembers_dbo.UsersGroup_UsersGroupId] FOREIGN KEY ([UsersGroupId]) REFERENCES [dbo].[UsersGroup] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.GroupMembers_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[GroupMembers]
    ADD CONSTRAINT [FK_dbo.GroupMembers_dbo.AspNetUsers_UserId] FOREIGN KEY ([MemberId]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_dbo.UserSettings_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[UserSettings]
    ADD CONSTRAINT [FK_dbo.UserSettings_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_dbo.UsersGroup_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[UsersGroup]
    ADD CONSTRAINT [FK_dbo.UsersGroup_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserCreatorId]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

MERGE INTO AspNetRoles AS TARGET USING (VALUES 
('e6e0d6ae-ee09-4b5f-a46a-c91a021ec148', N'User'),
('ccfa943c-ee4d-48df-b9c8-a3941e576dd9', N'Driver'),
('c81fd2e2-756b-4197-9ad0-9061d30e952f', N'Admin')) AS Source (Id, Name)
ON TARGET.Id = Source.Id
--	update matched rows 
WHEN MATCHED THEN 
UPDATE SET Name = Source.Name 
--	insert new rows 
WHEN NOT MATCHED BY TARGET THEN 
INSERT (Id, Name) 
VALUES (Id, Name);
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
